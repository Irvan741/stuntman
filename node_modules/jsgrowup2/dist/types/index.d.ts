import { Decimal } from "decimal.js";
export declare const MALE = "male";
export declare const FEMALE = "female";
export declare enum SexSpecification {
    Male = "male",
    Female = "female"
}
interface AgeSpecification {
    ageInDays?: number;
    ageInMonths?: number;
    dob?: Date;
    dateOfObservation?: Date;
}
export declare class Observation {
    t: Decimal;
    sex: SexSpecification;
    constructor(sex: SexSpecification, age: AgeSpecification);
    protected getBoxCoxVariables(tableName: string, length?: Decimal): Promise<any>;
    protected getFirstPassZScore(y: Decimal, l: Decimal, m: Decimal, s: Decimal): Decimal;
    protected adjustWeightBasedZScore(zScore: Decimal, y: Decimal, l: Decimal, m: Decimal, s: Decimal): Decimal;
    protected validateT(args: {
        t?: Decimal;
        lower?: number;
        upper?: number;
        msg?: string;
    }): void;
    protected validateMeasurement(measurement: number, lower: number, upper: number, msg?: string): Decimal;
    protected getZScore(table_name: string, y: Decimal, t?: Decimal): Promise<string>;
    armCircumferenceForAge(measurement: number): Promise<string>;
    bmiForAge(measurement: number): Promise<string>;
    headCircumferenceForAge(measurement: number): Promise<string>;
    lengthOrHeightForAge(measurement: number, recumbent?: boolean): Promise<string>;
    weightForAge(measurement: number): Promise<string>;
    weightForHeight(weight: number, height: number): Promise<string>;
    weightForLength(weight: number, length: number): Promise<string>;
}
export {};
//# sourceMappingURL=index.d.ts.map